[package]
name = "robius-location"
version.workspace = true
edition.workspace = true
authors = [
    "Kevin Boos <kevinaboos@gmail.com>",
    "Klim Tsoutsman <klim@tsoutsman.com>",
    "Project Robius Maintainers",
]
description = "Rust abstractions for multi-platform native authentication: biometrics, fingerprint, password, screen lock, TouchID, FaceID, Windows Hello, etc."
documentation = "https://docs.rs/robius-location"
homepage.workspace = true
keywords = ["robius", "location", "coordinate", "geo", "GPS"]
categories.workspace = true
license.workspace = true
repository.workspace = true
readme = "README.md"


## Note: ideally this would be only included when we're building for Android,
## but Cargo doesn't support target-specific build scripts yet.
## See: <https://github.com/rust-lang/cargo/issues/4932> and
## <https://github.com/rust-lang/cargo/issues/14378#issuecomment-2278333431>.
## We cannot simply use `cfg(target_os = "android")` here,
## because the build script's notion of a "target" is that of the HOST system,
## not the target. So if we were to use `cfg(target_os = "android")` here,
## it would only take effect when building on an Android host itself, which never happens.
[build-dependencies]
android-build.workspace = true


[dependencies]
cfg-if.workspace = true


[target.'cfg(target_os = "android")'.dependencies]
jni.workspace = true
robius-android-env.workspace = true


[target.'cfg(target_vendor = "apple")'.dependencies]
objc2.workspace = true
objc2-foundation = { workspace = true, features = [ "NSEnumerator" ] }
objc2-core-location = { workspace = true, features = [
    "CLError",
    "CLLocation",
    "CLLocationManager",
    "CLLocationManagerDelegate"
] }


[target.'cfg(target_os = "windows")'.dependencies]
tokio = { workspace = true, optional = true, features = ["rt"] }
windows = { workspace = true, features = [
    "Devices_Geolocation",
    "deprecated",
] }


[features]
## Enables usage of async tasks via tokio; currently only used on Windows.
async = ["dep:tokio"]
